name: Update RSS Feed
on:
  schedule:
    - cron: '0 */12 * * *'  # UTC 0/12点运行
  workflow_dispatch:

permissions:
  contents: write

jobs:
  update:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # 禁用浅层克隆，确保获取最新文件 <button class="citation-flag" data-index="6">

      - uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - run: pip install --no-cache-dir requests==2.31.0 beautifulsoup4==4.12.2 lxml==4.9.3  # 禁用pip缓存 <button class="citation-flag" data-index="5">

      - run: |
          # 强制清除本地缓存（防止残留）<button class="citation-flag" data-index="2"><button class="citation-flag" data-index="4">
          sudo apt-get clean
          sudo rm -rf /var/lib/apt/lists/*

      - run: |
          python -c "
          import sys

          # 从 deleted_urls.txt 提取 URL
          deleted_urls = set()
          try:
              with open('deleted_urls.txt', 'r', encoding='utf-8') as f:
                  for line in f:
                      if '&&' in line:
                          _, url = line.strip().split('&&', 1)
                          deleted_urls.add(url.strip())
          except FileNotFoundError:
              pass

          # 保存纯URL到临时文件（避免格式污染）<button class="citation-flag" data-index="6">
          with open('deleted_urls.pure.txt', 'w', encoding='utf-8') as f:
              f.write('\n'.join(deleted_urls))"

      - run: |
          python -c "
          import requests
          from bs4 import BeautifulSoup
          from urllib.parse import urlparse, parse_qs

          # 读取已存在的URL（防重复）
          existing = set()
          try:
              with open('rss.txt', 'r', encoding='utf-8') as f:
                  existing = {line.split('&&')[1].strip() for line in f if '&&' in line}
          except FileNotFoundError:
              pass

          # 读取纯URL黑名单 <button class="citation-flag" data-index="3"><button class="citation-flag" data-index="6">
          deleted = set()
          try:
              with open('deleted_urls.pure.txt', 'r', encoding='utf-8') as f:
                  deleted = {line.strip() for line in f}
          except FileNotFoundError:
              pass

          new_entries = []

          with open('rss_sources.txt', 'r') as f:
              rss_list = [url.strip() for url in f if url.strip()]

          for rss in rss_list:
              try:
                  headers = {
                      'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36',
                      'Referer': 'https://www.ximalaya.com/',
                      'Cache-Control': 'no-cache, no-store, must-revalidate',  # 强制清除HTTP缓存 <button class="citation-flag" data-index="1"><button class="citation-flag" data-index="5">
                      'Pragma': 'no-cache',
                      'Expires': '0'
                  }
                  response = requests.get(rss, headers=headers, timeout=10)
                  response.raise_for_status()
                  soup = BeautifulSoup(response.content, 'xml')

                  for item in soup.find_all('item'):
                      title = item.title.text.strip().replace(' ', '_')
                      enclosure = item.find('enclosure')
                      if enclosure and enclosure.get('url', '').endswith('.m4a'):
                          raw_url = enclosure['url']
                          parsed = urlparse(raw_url)
                          jt_url = parse_qs(parsed.query).get('jt', [raw_url])[0].split('?')[0]
                          
                          # 严格过滤逻辑 <button class="citation-flag" data-index="6"><button class="citation-flag" data-index="7">
                          if jt_url not in existing and jt_url not in deleted:
                              new_entries.append(f\"{title}&&{jt_url}\")
                          else:
                              print(f'Skipped: {jt_url}')  # 调试日志 <button class="citation-flag" data-index="2">

              except Exception as e:
                  print(f'Error processing {rss}: {str(e)}')

          # 追加新条目到文件末尾 <button class="citation-flag" data-index="5">
          if new_entries:
              with open('rss.txt', 'a', encoding='utf-8') as f:
                  f.write('\n'.join(new_entries) + '\n')"

      - name: Commit changes
        run: |
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          git add rss.txt deleted_urls.pure.txt  # 提交纯URL文件 <button class="citation-flag" data-index="6">
          git commit -m "Update RSS $(date +'%Y-%m-%d %H:%M')" || echo "No changes"
          git push origin main
