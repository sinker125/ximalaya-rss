name: Update RSS Feed
on:
  schedule:
    - cron: '0 12 * * 5'  # UTC 0/12点运行
  workflow_dispatch:

permissions:
  contents: write

jobs:
  update:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout latest code
        uses: actions/checkout@v4
        with:
          # 确保拉取最新的代码
          ref: main
          # 获取全量的历史记录，避免浅克隆导致的问题
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          # 安装指定版本的依赖库
          pip install requests==2.31.0 beautifulsoup4==4.12.2 lxml==4.9.3

      - name: Extract pure URLs from deleted_urls.txt
        run: |
          python -c "
          import sys
          # 从 deleted_urls.txt 提取 URL
          deleted_urls = set()
          try:
              with open('deleted_urls.txt', 'r', encoding='utf-8') as f:
                  for line in f:
                      if '&&' in line:
                          _, url = line.strip().split('&&', 1)
                          deleted_urls.add(url.strip())
          except FileNotFoundError:
              pass

          # 保存纯 URL 到临时文件
          with open('deleted_urls.pure.txt', 'w', encoding='utf-8') as f:
              f.write('\n'.join(deleted_urls))"

      - name: Update RSS feed
        run: |
          python -c "
          import requests
          from bs4 import BeautifulSoup
          from urllib.parse import urlparse, parse_qs
          from datetime import datetime
          import random

          # 读取已存在的 URL（防重复）
          existing = set()
          try:
              with open('rss.txt', 'r', encoding='utf-8') as f:
                  existing = {line.split('&&')[1].strip() for line in f if '&&' in line}
          except FileNotFoundError:
              pass

          # 读取纯 URL 黑名单
          deleted = set()
          try:
              with open('deleted_urls.pure.txt', 'r', encoding='utf-8') as f:
                  deleted = {line.strip() for line in f}
          except FileNotFoundError:
              pass

          new_entries = []

          with open('rss_sources.txt', 'r') as f:
              rss_list = [url.strip() for url in f if url.strip()]

          for rss in rss_list:
              try:
                  # 为 URL 添加随机参数以绕过缓存
                  rss_with_random = rss + ('&' if '?' in rss else '?') + f'random={random.random()}'
                  headers = {
                      'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36',
                      'Referer': 'https://www.ximalaya.com/',
                      'Cache-Control': 'no-cache, no-store, must-revalidate',
                      'Pragma': 'no-cache',
                      'Expires': '0'
                  }
                  response = requests.get(rss_with_random, headers=headers, timeout=10)
                  response.raise_for_status()
                  soup = BeautifulSoup(response.content, 'xml')

                  for item in soup.find_all('item'):
                      title = item.title.text.strip().replace(' ', '_')
                      enclosure = item.find('enclosure')
                      pub_date = item.find('pubDate')
                      if pub_date:
                          pub_date_str = pub_date.text
                          try:
                              pub_date = datetime.strptime(pub_date_str, '%a, %d %b %Y %H:%M:%S %z')
                          except ValueError:
                              try:
                                  pub_date = datetime.strptime(pub_date_str, '%Y-%m-%dT%H:%M:%S%z')
                              except ValueError:
                                  try:
                                      pub_date = datetime.strptime(pub_date_str, '%Y-%m-%d %H:%M:%S')
                                  except ValueError:
                                      print(f'Failed to parse date: {pub_date_str}')
                                      pub_date = None
                      if enclosure and enclosure.get('url', '').endswith('.m4a'):
                          raw_url = enclosure['url']
                          parsed = urlparse(raw_url)
                          jt_url = parse_qs(parsed.query).get('jt', [raw_url])[0].split('?')[0]

                          # 严格过滤逻辑
                          if jt_url not in existing and jt_url not in deleted:
                              new_entries.append((pub_date, f\"{title}&&{jt_url}\"))
                              print(f'Adding new entry: {jt_url}')  # 调试日志
                          else:
                              print(f'Skipped: {jt_url}')  # 调试日志
              except Exception as e:
                  print(f'Error processing {rss}: {str(e)}')

          # 按发布时间降序排序
          new_entries.sort(key=lambda x: x[0] if x[0] else datetime.min, reverse=True)
          new_entries = [entry[1] for entry in new_entries]

          # 插入新条目到文件开头
          if new_entries:
              try:
                  with open('rss.txt', 'r', encoding='utf-8') as f:
                      existing_content = f.read()
              except FileNotFoundError:
                  existing_content = ''
              with open('rss.txt', 'w', encoding='utf-8') as f:
                  f.write('\n'.join(new_entries) + '\n' + existing_content)"

      - name: Commit changes
        run: |
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          git add rss.txt deleted_urls.pure.txt
          git commit -m "Update RSS $(date +'%Y-%m-%d %H:%M')" || echo "No changes"
          git push origin main
